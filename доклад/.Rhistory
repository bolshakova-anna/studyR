plot(cars)
## Do Not Run
# how to install required packages?
install.packages(c("RColorBrewer","mixOmics"))
# source("http://bioconductor.org/biocLite.R")
# biocLite("edgeR")
## End DNR
library(edgeR)
## Do Not Run
# how to install required packages?
install.packages(c("RColorBrewer","mixOmics"))
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
library(edgeR)
library(edgeR)
load("Day3/Counts.RData")
library(edgeR)
load("Counts.RData")
Counts <- tmp$counts
colnames(Counts) <- c("16N", "16T", "18N", "18T", "19N", "19T")
dim(Counts)
head(Counts)
dgList <- DGEList(counts=Counts, genes=rownames(Counts))
dgList
dgList$samples
head(dgList$counts) #Many rows!
head(dgList$genes) #Likewise!
countsPerMillion <- cpm(dgList)
summary(countsPerMillion)
#'summary' is a useful function for exploring numeric data; eg. summary(1:100)
countCheck <- countsPerMillion > 1
head(countCheck)
keep <- which(rowSums(countCheck) >= 2)
dgList <- dgList[keep,]
summary(cpm(dgList)) #compare this to the original summary
```{r}
countsPerMillion <- cpm(dgList)
head(countCheck)
plotMDS(dgList)
sampleType<- rep("N", ncol(dgList)) #N=normal; T=tumour
sampleType[grep("T", colnames(dgList))] <- "T"
#'grep' is a string matching function.
sampleReplicate <- paste("S", rep(1:3, each=2), sep="")
sampleType<- rep("N", ncol(dgList)) #N=normal; T=tumour
sampleType[grep("T", colnames(dgList))] <- "T"
#'grep' is a string matching function.
sampleReplicate <- paste("S", rep(1:3, each=2), sep="")
designMat <- model.matrix(~sampleReplicate + sampleType)
designMat
dgList <- estimateGLMCommonDisp(dgList, design=designMat)
dgList <- estimateGLMTrendedDisp(dgList, design=designMat)
dgList <- estimateGLMTagwiseDisp(dgList, design=designMat)
plotBCV(dgList)
fit <- glmFit(dgList, designMat)
lrt <- glmLRT(fit, coef=4)
edgeR_result <- topTags(lrt)
?topTags
?decideTests
deGenes <- decideTestsDGE(lrt, p=0.001)
deGenes <- rownames(lrt)[as.logical(deGenes)]
plotSmear(lrt, de.tags=deGenes)
abline(h=c(-1, 1), col=2)
setwd("C:/Users/User/studyR/доклад")
dgList <- DGEList(counts=Counts, genes=rownames(Counts))
# dgList
# dgList$samples
# head(dgList$counts)
# head(dgList$genes)
dgList <- DGEList(counts=Counts, genes=rownames(Counts))
dgList
# dgList$samples
# head(dgList$counts)
# head(dgList$genes)
countsPerMillion <- cpm(dgList)
summary(countsPerMillion)
